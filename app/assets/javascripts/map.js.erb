// ********** //
// MAP SET UP //
// ********** //

<%# TODO set up variable for location of media server on dev / production %>

// request the geojson and load it behind the scenes from the map interface
// then add the layers to the map when ready
<%# note currently there is only one request being made at a given time, but
    in the future there may be more layers for 1834 so leaving as is %>
console.info("Pulling directory data from: " + "https://cdrhdev1.unl.edu/media/data/oscys/output/development/json/"+year+"_directory.json")
var requests = [
  $.getJSON("https://cdrhdev1.unl.edu/media/data/oscys/output/development/json/"+year+"_directory.json"),
  // $.getJSON("https://cdrhdev1.unl.edu/media/data/oscys/output/development/json/1834_directory.json")
];

$.when
  .apply($,requests)
  .done(function() {
    // assume the same order as outgoing requests, multiple commented out for now
    // create_and_apply_layers(arguments[0][0], arguments[1][0])
    create_and_apply_layers(arguments[0])
  })
  .fail(function() {
    console.error("something went wrong with request for directory geojson");
  });

// the map is created while the above layers are loaded

// create a map zoomed to the middle of Washington DC
var map = L.map('map').setView([38.89, -77.02], 13.5);

// enable to use open street maps baselayer
// L.tileLayer( 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
//     attribution: '<a href="https://www.openstreetmap.org/copyright">Â© OpenStreetMap contributors</a>',
//     subdomains: ['a','b','c']
// }).addTo( map );

// stamen map layer, comment this if you are uncommenting the open street maps layer
var terrainLayer = new L.StamenTileLayer('terrain');
map.addLayer(terrainLayer);


// temporary historical basemap
// will need to put on production for more permenant basemap
var wms = "https://cors1601.unl.edu/geoserver/gwc/service/wms";
historical = new L.TileLayer.WMS(wms, {
    layers: "oscys:WashingtonDC1",
    format: "image/png",
    transparent: true
});
map.addLayer(historical);

// add a scale to the map
L.control.scale({maxWidth: 200, position: "bottomleft"}).addTo(map);

// ******** //
// SETTINGS //
// ******** //

var clusterSettings = {
  maxClusterRadius: 0,
  singleMarkerMode: true,
  spiderLegPolylineOptions: {
    color: '#FFF',
    weight: 3,
    opacity: 1
  },
  iconCreateFunction: function(cluster) {
    return L.divIcon({
      html: cluster.getChildCount(),
      className: 'marker_cluster',
      iconSize: L.point(20, 20)
    });
  }
};

// all circular markers on the map start with these settings
// by default markers are a light grey
function defaultMarker(color = "#B7B7B7") {
  return {
    // border color
    color: "#000",
    // inner color
    fillColor: color,
    fillOpacity: 0.8,
    opacity: 1,
    radius: 4,
    weight: 1,
  }
};

// these are the fields from the spreadsheet used in the popups
var buildingFields = [
  "Description",
  "Address"
];

// these are the fields from the spreadsheet used in the popups
var congressFields = [
  "Occupation",
  "State",
  "Political Party",
  "Address"
];

// this uses fields from the spreadsheet to create an abbreviated image name
var congressMapping = {
  // parties
  "Democratic-Republican" : "dr",
  "Federalist" : "fed",
  // roles
  "Delegate, Representative" : "delegate",
  "Representative" : "rep",
  "Vice-President of the U. S. and President of the Senate" : "vp",
  "Senator" : "senator"
};

// these are the fields from the spreadsheet used in the popups
var directoryFields = [
  "Court Role",
  "Additional Roles",
  "Occupation",
  "HISCO",
  "Race",
  "Gender",
  "Address",
  "Memorial"
];

// these are the fields from the spreadsheet used in the popups
var foreignFields = [
  "Country",
  "Occupation",
  "HISCO",
  "Address"
];

// these abbrevations are mapped to more descriptive terminology
// note quotation marks around terminology used in directory
// they show up in the marker popup information
var fieldMapping = {
  "c" : "colored",
  "e" : "Signatory of Memorial",
  "f" : "female",
  "m" : "male",
  "u" : "unknown",
  "w" : "white",
  "?" : "Possible Signatory of Memorial"
};

// selects the marker color for each of the following
// NOTE: if you change a color here you must also update
// the color for the legend in map.css
var markerColors = {
  "Court Role" : {
    "Attorney" : "red",
    "Clerk" : "teal",
    "Defendant" : "green",
    "Judge" : "purple",
    "Juror" : "orange",
    "Jury Pool" : "yellow",
    "Justice of the Peace" : "pink",
    "Process Server" : "brown",
    "Witness" : "aqua",
    "Multiple Roles" : "navy"
  },
  "Gender" : {
    "f" : "#F21DFF",
    "m" : "cyan",
    "u" : "orange"
  },
  // occupation
  "HISCO" : {
    "administrative" : "green",
    "agricultural" : "red",
    "clerical" : "#E3EC70",
    "professional" : "orange",
    "sales" : "lavender",
    "service" : "purple",
    "skilled labor" : "blue",
    "unskilled labor" : "aqua"
  },
  "Memorial" : {
    "e" : "white",
    "?" : "darkturquoise"
  },
  "Race" : {
    "c" : "blue",
    "w" : "yellow"
  }
};

var polygonColors = {
  "population" : {
    1500: "yellow",
    2000: "orange",
    2500: "red",
    "2500+" : "purple"
  },
  "property_values" : {
    "low": "grey",
    "high": "blue",
    "very_high": "black"
  },
  "race" : {
    25: "white",
    30: "yellow",
    35: "yellowgreen",
    "35+" : "green"
  }
}

var wardOpacity = 0.6;

// these images are used to mark building types
var markerImages = {
  // needs to be a fallback option
  "default" : "<%= asset_path "map_directory/missing_image.svg" %>",
  // congress
  "dr_delegate"         : "<%= asset_path "map_directory/dr_delegate.svg" %>",
  "dr_rep"              : "<%= asset_path "map_directory/dr_rep.svg" %>",
  "dr_senator"          : "<%= asset_path "map_directory/dr_senator.svg" %>",
  "dr_vp"               : "<%= asset_path "map_directory/dr_vp.svg" %>",
  "fed_delegate"        : "<%= asset_path "map_directory/fed_delegate.svg" %>",
  "fed_rep"             : "<%= asset_path "map_directory/fed_rep.svg" %>",
  "fed_senator"         : "<%= asset_path "map_directory/fed_senator.svg" %>",
  "fed_vp"              : "<%= asset_path "map_directory/fed_vp.svg" %>",
  "unknown_delegate"    : "<%= asset_path "map_directory/unknown_delegate.svg" %>",
  // public buildings
  "Church (Catholic)"         : "<%= asset_path "map_directory/cathedral.png" %>",
  "Church (White Protestant)" : "<%= asset_path "map_directory/church.png" %>",
  "Church (Black Protestant)" : "<%= asset_path "map_directory/chapel.png" %>",
  "Government Building"       : "<%= asset_path "map_directory/us-capitol.png" %>",
  "Other Public Building"     : "<%= asset_path "map_directory/university.png" %>",
  "School"                    : "<%= asset_path "map_directory/school-building.png" %>",
  "Hotel/Tavern"              : "<%= asset_path "map_directory/single-bed.png" %>",
  "Bank"                      : "<%= asset_path "map_directory/bank-building.png" %>",
  "Burying Ground"            : "<%= asset_path "map_directory/headstone.png" %>",
  // foreign dignitaries
  "britain"  : "<%= asset_path "map_directory/britain.png" %>",
  "france"  : "<%= asset_path "map_directory/france.png" %>",
  "mexico"  : "<%= asset_path "map_directory/mexico.png" %>",
  "sweden"  : "<%= asset_path "map_directory/sweden.png" %>",
}

// ****** //
// LAYERS //
// ****** //

var create_and_apply_layers = function(directory_json) {
  // court role  will be added to the map below
  var courtRole = createColorMarkerLayer(directory_json, "Court Role", false)
  var race = createColorMarkerLayer(directory_json, "Race", true)
  var gender = createColorMarkerLayer(directory_json, "Gender", true)
  var occupations = createColorMarkerLayer(directory_json, "HISCO", true)
  var memorial = createColorMarkerLayer(directory_json, "Memorial", true)

  if (year == "1822") {
    // adds the building layer
    var buildings = L.geoJSON(building_json_1822, {
      pointToLayer: function (feature, latlng) {
        image = markerImages[feature.properties["Description"]] || markerImages["default"];
        var icon = L.icon({ iconUrl: image, iconSize: [20, 20] });
        return L.marker(latlng, { icon: icon });
      },
      onEachFeature: onEachFeatureBuilding,
    })

    // adds the foreign dignitaries layer
    var foreign = L.geoJSON(foreign_json_1822, {
      pointToLayer: function (feature, latlng) {
        country = feature.properties["Country"].toLowerCase();
        image = markerImages[country] || markerImages["default"];
        var icon = L.icon({ iconUrl: image, iconSize: [18, 18] });
        return L.marker(latlng, { icon: icon });
      },
      onEachFeature: onEachFeatureForeign,
    });

    // adds the roles in congress layer
    var congress = L.geoJSON(congress_json_1822, {
      pointToLayer: function (feature, latlng) {
        party = congressMapping[feature.properties["Political Party"]] || "unknown"
        role = congressMapping[feature.properties["Occupation"]] || "unknown"
        imgName = party + "_" + role;
        imgPath = markerImages[imgName] || markerImages["default"];
        var icon = L.icon({ iconUrl: imgPath, iconSize: [18, 18] });
        return L.marker(latlng, { icon: icon });
      },
      onEachFeature: onEachFeatureCongress,
    });
  }

  // adds the wards with population coloring
  var wpfield = (year == "1822") ? "1820_Total_Population" : "1830_Total_Population";
  var wardPop = L.geoJSON(wards_json, {
    onEachFeature: onEachFeatureWard([wpfield]),
    style: styleWardPopulation,
  });

  var wrfield = (year == "1822") ? "1820_Percent_Colored" : "1830_Percent_Colored";
  var wardRace = L.geoJSON(wards_json, {
    onEachFeature: onEachFeatureWard([wrfield]),
    style: styleWardRace,
  });

  if (year == "1834") {
    var wardPropertyValues = L.geoJSON(wards_json, {
      onEachFeature: onEachFeatureWard(["1830_Property_Values", "1830_Improvement_Values"]),
      style: styleWardPropertyValues,
    });
  }

  map.addLayer(courtRole);

  // uncomment these lines if you would prefer that these layers
  // are displayed on the map on startup
  // buildings.addTo(map);
  // congress.addTo(map);
  // foreign.addTo(map);

  // creates a UI control for switching between layers
  if (year == "1822") {
    checkboxes = {
      "Public Buildings" : buildings,
      "Congress" : congress,
      "Foreign Dignitaries" : foreign,
      "1820 Ward Population": wardPop,
      "1820 Ward % Colored": wardRace,
    }
  } else {
    checkboxes = {
      "1830 Ward Population": wardPop,
      "1830 Ward % Colored": wardRace,
      "1830 Ward Property Values": wardPropertyValues
    }
  }
  var layerControl = L.control.layers(
    // the first group of layers only displays ONE layer at a given time
    {
      "Court Role": courtRole,
      "Occupation" : occupations,
      "Race" : race,
      "Gender" : gender,
      "Memorial" : memorial
    },
    // the second group of layers may have multiple displaying at once
    checkboxes,
    // further layer control settings are available
    // such as the location on the map ("topright" at the moment)
    {
      collapsed: false, autoZIndex: false, sortLayers: false,
    }
  )
  layerControl.addTo(map);

}

// ****** //
// EVENTS //
// ****** //

// Note: baselayer refers to the directory radio buttons
// while overlay refers to checkbox layers
// only using baselayer for this implementation
// selects where id on html element is "key-Type"
// for example: "key-Court_Role"
// so be careful when changing the HTML

// when directory layer is changed, display the
// selected and hide all others
map.on('baselayerchange', function(e) {
  name = getLayerKeyName(e.name)
  legend_keys = document.getElementsByClassName("key-directory")
  for (var i = 0; i < legend_keys.length; i++) {
    id = legend_keys[i].id;
    classes = legend_keys[i].classList;
    // hide all directory keys except for the currently selected one
    if (id == "key-"+name) {
      classes.remove("key-hidden");
    } else {
      classes.add("key-hidden");
    }
  }
});

// *********************************** //
// GENERALIZED MARKER / POPUP CREATION //
// *********************************** //

// this function tries to consolidate all the various "names" into one string
// which is a little tricky because there are building names and people's names
// and some of the information doesn't use the same fields (particularly when
// it comes to suffix / prefix / titles)
function buildRecordName(props, name, firstName=null, prefix=null, suffix=null) {
  var last = props[name]; // usually the surname or the name of a building, etc
  var first = props[firstName];
  var pre = props[prefix];
  var post = props[suffix];
  var filtered = [pre, first, last, post].filter(function (item) {
    return (item != null && item.length > 0);
  });
  // return the name pieces in order with a space separator
  return filtered.join(" ");
};

// creates a simple marker layer from the geojson
// "type" passed in refers to occupation, gender, etc
// and sets the colors and legend key which will be selected
// unless all points specified, filter out those points in the directory which
// do not have any values in the selected field
function createColorMarkerLayer(geojson, type, filter=true) {
  // because many of the points are stacked on top of each other
  // we are using a marker cluster library, so create the marker group
  // before adding layers below
  var markers = L.markerClusterGroup(clusterSettings);

  var geojson = L.geoJSON(geojson, {
    pointToLayer: function pointToLayer (feature, latlng) {
      return L.circleMarker(latlng,
        markerSettings(type, feature.properties[type])
      )
    },
    onEachFeature: onEachFeature,
    // by default, filter the points by the particular field in question
    // so that we're only displaying known information
    filter: function(feature, layer) {
      if (filter) {
        role = feature.properties[type];
        return (role && role.length > 0);
      } else {
        return true
      }
    }
  })
  return markers.addLayer(geojson);
};

// remove year from front of layer name and change spaces into underscores
function getLayerKeyName(long_name) {
  return long_name.replace(/^\d{4} /, "")
             .replace(" ", "_")
};

// passes back the settings for a particular point on the map
// for example, if an occupation point is being created, this will
// look at the occupation field's value and then choose the correct
// color from the occupation settings near the top of this file
// and then return an options object to be used in the layer
function markerSettings(type, item) {
  // remove extra spaces from the end
  var item = item.replace(/\s+$/, "")
  // get the particular cluster of colors for a type or return empty
  var items = markerColors[type] || {}
  // match against the list of items and create a marker with the color
  var color = items[item]
  return defaultMarker(color)
};

// props expected to be the geoJSON feature.properties
// returns html for the marker popups
//   div with h2 (heading), li for each item, and url link (if supplied)
// changes HISCO to "Work Category"
// and maps gender and race abbreviations
function htmlBuilder(heading, props, fieldList, url) {
  var html = '<div class="marker_popup">';
  html += '<h2>'+heading+'</h2>';
  html += '<ul>';
  for (var i = 0; i < fieldList.length; i++) {
    var field = fieldList[i];
    if (props.hasOwnProperty(field) && props[field].length != 0) {
      var label = field.replace(/_/g, " ");
      if (label == "HISCO") { label = "Work Category"; }
      var val = props[field];
      if (label == "Gender" || label == "Race" || label == "Memorial") {
        val = fieldMapping[val] || val;
      }
      html += '<li><strong>'+label+'</strong>: '+val+'</li>';
    }
  }
  if (url) { html += '<li><a href="'+url+'" target="_blank">More Info on <em>OSCYS</em></a></li>' }
  html += '</ul>';
  html += '</div>';
  return html;
}

// creates a popup for the public building markers
// NOTE: update the buildingFields values at the top of this file to change
// which fields are being displayed in popups
function onEachFeatureBuilding(feature, layer) {
  var name = buildRecordName(feature.properties, "Name")
  // Change congressFields content near top of this file to change the displayed fields
  var html = htmlBuilder(name, feature.properties, buildingFields, feature.properties["OSCYS Link"])
  layer.bindPopup(html);
};

// creates a popup for the congress markers
// NOTE: update the congressFields values at the top of this file to change
// which fields are being displayed in popups
function onEachFeatureCongress(feature, layer) {
  var name = buildRecordName(feature.properties, "Name", "Forename", "Prefix", "Suffix")
  // Change congressFields content near top of this file to change the displayed fields
  var html = htmlBuilder(name, feature.properties, congressFields, feature.properties["OSCYS Link"])
  layer.bindPopup(html);
};

// creates a popup for the foreign dignitaries markers
// NOTE: update the foreignFields values at the top of this file to change
// which fields are being displayed in popups
function onEachFeatureForeign(feature, layer) {
  props = feature.properties;
  var name = buildRecordName(props, "Name", "Forename", "Prefix", "Suffix");
  var html = htmlBuilder(name, props, foreignFields, props["OSCYS Link"]);
  layer.bindPopup(html);
};

function onEachFeatureWard(fields) {
  return function onEachFeature(feature, layer) {
    props = feature.properties;
    var name = props["Name"];
    var html = htmlBuilder(name, props, fields, null);
    layer.bindPopup(html);
  }
};

// creates a popup for the directory markers
// NOTE: update the directoryFields values at the top of this file to change
// which fields are being displayed in popups
function onEachFeature(feature, layer) {
  var name = buildRecordName(feature.properties, "Name", "Forename", "Prefix", "Suffix")
  var html = htmlBuilder(name, feature.properties, directoryFields, feature.properties["OSCYS Link"]);
  layer.bindPopup(html);
};

function styleWardPopulation(feature) {
  var pop = (year == "1822") ? feature.properties["1820_Total_Population"] : feature.properties["1830_Total_Population"];
  var colors = polygonColors["population"];
  var fill = "grey";
  if (pop < 1500) { fill = colors[1500] }
  else if (pop < 2000) { fill = colors[2000] }
  else if (pop < 2500) { fill = colors[2500] }
  else { fill = colors["2500+"] }

  return { fillColor: fill, color: "black", fillOpacity: wardOpacity };
}

function styleWardPropertyValues(feature) {
  var val = feature.properties["1830_Property_Values"];
  var colors = polygonColors["property_values"];
  var fill = "grey";
  if (val < 50000) { fill = colors["low"] }
  else if (val < 150000) { fill = colors["high"] }
  else { fill = colors["very_high"] }

  return { fillColor: fill, color: "black", fillOpacity: wardOpacity };
}

function styleWardRace(feature) {
  var perc = (year == "1822") ? feature.properties["1820_Percent_Colored"] : feature.properties["1830_Percent_Colored"];
  var colors = polygonColors["race"];
  var fill = "grey";
  if (perc < 25) { fill = colors[25] }
  else if (perc < 30) { fill = colors[30] }
  else if (perc < 35) { fill = colors[35] }
  else { fill = colors["35+"] }

  return { fillColor: fill, color: "black", fillOpacity: wardOpacity };
}
